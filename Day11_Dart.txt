Day 11List: - Lists are growable and is a collection of data - If the type is not mentioned then it can have a collection various values with different datatype 	void main() 	{  		List li1 = [1,"hi",true,10.27]; 		li1.add("byee");  		li1.add("false");  		print(li1);  		List<String> li2 = ["Hi","Hello","Bye"];  		print(li2);  	}Spread Operator(...): - we can add a list to another list using the spread operator 	void main() 	{ 		List li1 = [1,"hi",true,10.27]; 		List li2 = [0,...li1,5];  		print(li2);        }List Iteration: 	void main() 	{  		List li = [1,2,3,4];  		for(var i=0;i<li.length;i++)  		{    			print(li[i]);  		}  		for(var i in li)  		{    			print(i);  		}  		li.forEach((i)=>print(i)); 	}List.filled(length,value): - we can fill the list with a particular value for the specified length. It can be growable by default and we can also set the growable to false so that no other values can be added to the list. 	void main() 	{  		List<String> li = List.filled(6,"Hi",growable:false);  		print(li); --->[Hi, Hi, Hi, Hi, Hi, Hi] 	}List Methods: 	void main() 	{  		List<int> li = [1,2,3,4];  		li.add(5);  		print("li: $li");  		List<int> li1 = [1,71];  		print("li1: $li1");  		li.addAll(li1);  		print("li after addAll(li1): $li");  		li.insert(0,10);  		print("Inserted 10 at index 0: $li");  		List<int> li2 = [81,56];  		print("li2: $li2");  		li.insertAll(5,li2);  		print("Inserting li2 at index 5: $li");  		li.remove(10);  		print("After removing 10 in li: $li");  		li.removeRange(0,5);  		print("Removing data from index 0 to 5: $li");  		li.removeAt(0);  		print("Removing element at index 0: $li");  		li.removeLast();  		print("Removing the last element: $li");  		print("Index of 56 is ${li.indexOf(5)}");  		var a = li.join(',');  		print("After joining the elements with ',' $a"); 		print("Before sorting li: $li");  	        li.sort();  		print("After sorting li: $li"); 	}.map() in List:  - map() method is used to take each element of a iterable (list or set) and transform it to a new element  - it returns a new iterable 	void main() 	{  		List<int> li = [1,2,3,4];  		var add5 = li.map((i)=>(i+5));  		print(add5);                      ---> o/p: (6,7,8,9)  		List<String> li2 = ["hi","bye","everyone"];  		var uppr = li2.map((i)=>i.toUpperCase());  		print(uppr);                   ---> o/p: (HI,BYE,EVERYONE)  		List li3 = uppr.toList();  		print(li3);                    ---> o/p: [HI,BYE,EVERYONE] 	} .where() in List: - where() is used to filter the data 	void main() 	{  		List<int> li = [31,22,23,4,11,232];  		var even = li.where((i)=>(i%2==0));  		print(even);  		List<String> li1 = ["Hey","hi","Bye","Goodbye","Hello"];  		var startsWith = li1.where((i)=>i.startsWith('H'));  		print(startsWith); 	}Functions: 	void main() 	{  		details("Subanu",21);  	} 	void details(String name, int age) 	{  		print("Hi this is $name and I'm $age years old"); 	} - we can also assign a function to a variable 	void main() 	{  		details("Subanu",21);  		var display = details;  		display("Abhi",20); 	} 	void details(String name, int age) 	{  		print("Hi this is $name and I'm $age years old"); 	} - passing function as an argument to another function 	void main() 	{  		var ans = details(personalDetails);  		print(ans); 	} 	String details(Function callFunc) 	{  		return callFunc("Subanu","Coimbatore"); 	} 	String personalDetails(String name, String city) 	{  		return "Name: $name City: $city"; 	} 	String employeeDetails(int empID, String desig) 	{  		return "Employee ID: $empID Designation: $desig"; 	} - passing the function and values as the arguments to another function 	void main() 	{  		var ans = details(personalDetails,"Subanu","Coimbatore");  		print(ans); 	} 	String details(Function callFunc,String name,String city) 	{  		return callFunc(name,city); 	} 	String personalDetails(String name, String city) 	{  		return "Name: $name City: $city"; 	} 	String employeeDetails(int empID, String desig) 	{  		return "Employee ID: $empID Designation: $desig"; 	} - create a reference variable so that to reach the inner function we can just call the inner function - Dart supports closures, meaning functions can "capture" variables from their surrounding scope even after the outer function has finished executing. - every variables that are in the outer function are stored in the closure so that the inner function can use the variables directly 	void main() 	{  		var res =display("Subanu");  		print(res()); 	} 	Function display(String name) ---> higher order function 	{  	String innerFunction()  	{    		return "Hi $name";  	}  	return innerFunction; 	}Lambda function:	void main()	{  		var res = display("Subanu");  		print(res);	}	var display = (String name) => "Hello $name";